var search_data = {"index":{"searchIndex":["datamapper","is","published","classmethods","instancemethods","resourceinstancemethods","all()","is_published()","publish_states_as_json()","publishable?()","publishable?()","readme"],"longSearchIndex":["datamapper","datamapper::is","datamapper::is::published","datamapper::is::published::classmethods","datamapper::is::published::instancemethods","datamapper::is::published::resourceinstancemethods","datamapper::is::published::classmethods#all()","datamapper::is::published#is_published()","datamapper::is::published::classmethods#publish_states_as_json()","datamapper::is::published::instancemethods#publishable?()","datamapper::is::published::resourceinstancemethods#publishable?()",""],"info":[["DataMapper","","classes/DataMapper.html","",""],["DataMapper::Is","","classes/DataMapper/Is.html","",""],["DataMapper::Is::Published","","classes/DataMapper/Is/Published.html","","<p>dm-is-published\n<p>This plugin makes it very easy to add different states to your models, like\n‘draft’ vs …\n"],["DataMapper::Is::Published::ClassMethods","","classes/DataMapper/Is/Published/ClassMethods.html","",""],["DataMapper::Is::Published::InstanceMethods","","classes/DataMapper/Is/Published/InstanceMethods.html","",""],["DataMapper::Is::Published::ResourceInstanceMethods","","classes/DataMapper/Is/Published/ResourceInstanceMethods.html","",""],["all","DataMapper::Is::Published::ClassMethods","classes/DataMapper/Is/Published/ClassMethods.html#method-i-all","(*args)","<p>Overriding the normal #all method to add some extra sugar.\n<p>Examples\n\n<pre class=\"ruby\"><span class=\"ruby-constant\">Article</span>.<span class=\"ruby-identifier\">all</span>  =<span class=\"ruby-operator\">&gt;</span> <span class=\"ruby-identifier\">returns</span> <span class=\"ruby-identifier\">all</span> <span class=\"ruby-constant\">Articles</span> <span class=\"ruby-operator\">...</span>\n</pre>\n"],["is_published","DataMapper::Is::Published","classes/DataMapper/Is/Published.html#method-i-is_published","(*args)","<p>method that adds a basic published status attribute to your model\n<p>params \n<p><code>states</code> - an array of 'states' ...\n"],["publish_states_as_json","DataMapper::Is::Published::ClassMethods","classes/DataMapper/Is/Published/ClassMethods.html#method-i-publish_states_as_json","()","<p>Returns a JSON representation of the publish states, where each state  is\nrepresented as a lowercase …\n"],["publishable?","DataMapper::Is::Published::InstanceMethods","classes/DataMapper/Is/Published/InstanceMethods.html#method-i-publishable-3F","()","<p>Ensuring all models using this plugin responds to publishable? with true.\n<p>Examples\n\n<pre>@published_model.publishable? ...</pre>\n"],["publishable?","DataMapper::Is::Published::ResourceInstanceMethods","classes/DataMapper/Is/Published/ResourceInstanceMethods.html#method-i-publishable-3F","()","<p>Ensuring all models NOT using this plugin responds to publishable? with\nfalse.\n<p>Examples\n\n<pre>@unpublished_model.publishable? ...</pre>\n"],["README","","files/README_rdoc.html","","<p>dm-is-published\n<p>This plugin makes it very easy to add different states to your models, like\n‘draft’ vs …\n"]]}}